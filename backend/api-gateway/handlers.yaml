openapi: 3.0.3
info:
  title: User Management API
  version: 1.0.0

paths:
  /users/register:
    post:
      summary: Регистрация нового пользователя
      description: Создает нового пользователя в системе
      requestBody:
        description: Данные для регистрации пользователя
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      login:
                        type: string
                        example: user123
                      email:
                        type: string
                        format: email
                        example: user@example.com
                      created_at:
                        type: string
                        format: date-time
                        example: '2023-01-15T14:30:00Z'
        '400':
          description: Некорректные данные запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Пользователь с таким логином или email уже существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/login:
    post:
      summary: Аутентификация пользователя
      description: Аутентификация пользователя по логину и паролю
      requestBody:
        description: Учетные данные пользователя
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Аутентификация успешна
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  user:
                    $ref: '#/components/schemas/User'
                    
        '400':
          description: Некорректные данные запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Неверный логин или пароль
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/profile:
    get:
      summary: Получение данных профиля пользователя
      description: Получает все данные профиля аутентифицированного пользователя
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Данные профиля успешно получены
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Обновление данных профиля пользователя
      description: Обновляет данные профиля аутентифицированного пользователя
      security:
        - BearerAuth: []
      requestBody:
        description: Данные для обновления профиля
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Профиль успешно обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile updated successfully
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Некорректные данные запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    RegisterRequest:
      type: object
      required:
        - login
        - password
        - email
      properties:
        login:
          type: string
          example: user123
          minLength: 3
          maxLength: 50
        password:
          type: string
          format: password
          example: securePassword123
          minLength: 8
        email:
          type: string
          format: email
          example: user@example.com

    LoginRequest:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
          example: user123
        password:
          type: string
          format: password
          example: securePassword123

    UpdateProfileRequest:
      type: object
      properties:
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        birth_date:
          type: string
          format: date
          example: '1990-01-01'
        email:
          type: string
          format: email
          example: john.doe@example.com
        phone_number:
          type: string
          example: '+1234567890'
          pattern: '^\+?[0-9]{10,15}$'

    User:
      type: object
      properties:
        user_id:
          type: string
          example: 6ba7b810-9dad-11d1-80b4-00c04fd430c8
        login:
          type: string
          example: user123
        email:
          type: string
          format: email
          example: user@example.com
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        birth_date:
          type: string
          format: date
          example: '1990-01-01'
        phone_number:
          type: string
          example: '+1234567890'
        created_at:
          type: string
          format: date-time
          example: '2023-01-15T14:30:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2023-01-20T12:15:00Z'

    ErrorResponse:
      type: string
      desctiption: Plain error message

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
