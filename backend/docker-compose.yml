version: '3.8'

services:
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway
    restart: always
    ports:
      - "8080:8080"
    environment:
      - USER_SERVICE_URL=http://user-service:8081
      - SERVER_PORT=8080
      - LOG_LEVEL=INFO
    depends_on:
      - user-service
    networks:
      - app-network

  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    container_name: user-service
    restart: always
    ports:
      - "8081:8081"
    environment:
      - SERVER_PORT=8081
      - POSGRES_PORT=5432
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
      - db-network

  # PostgreSQL база данных
  postgres:
    image: postgres:15
    container_name: user-service-postgres
    restart: always
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: userservice
      POSTGRES_PASSWORD: userservicepassword
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./user-service/postgres/init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U userservice -d userdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - db-network

networks:
  app-network:
    driver: bridge
  db-network:
    driver: bridge

volumes:
  postgres-data:
